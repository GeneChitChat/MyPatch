diff --git a/app/src/main/java/com/coocoo/activity/AdBlockShareActivity.kt b/app/src/main/java/com/coocoo/activity/AdBlockShareActivity.kt
index e41e1486f..e6fc1981b 100644
--- a/app/src/main/java/com/coocoo/activity/AdBlockShareActivity.kt
+++ b/app/src/main/java/com/coocoo/activity/AdBlockShareActivity.kt
@@ -97,7 +97,7 @@ class AdBlockShareActivity : Activity() {
     override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
         if (requestCode == REQUEST_CODE) {
             if (resultCode == RESULT_OK) {
-                finish()
+//                finish()
             } else if (resultCode == RESULT_CANCELED) {
                 ReportShare.reportShareAdBlockCancel()
             }
diff --git a/app/src/main/java/com/coocoo/firebase/remoteConfig/RemoteConfig.kt b/app/src/main/java/com/coocoo/firebase/remoteConfig/RemoteConfig.kt
index 990f00ac4..ad57ac03e 100644
--- a/app/src/main/java/com/coocoo/firebase/remoteConfig/RemoteConfig.kt
+++ b/app/src/main/java/com/coocoo/firebase/remoteConfig/RemoteConfig.kt
@@ -736,7 +736,24 @@ object RemoteConfig {
         }
 
     fun getWhatsTallerInfoList(default: List<WhatstallerInfo>?): List<WhatstallerInfo>? {
-        val installerInfoList = getString(RemoteConfigKeys.WHATSTALLER_INFORMATION_LIST, "")
+        val installerInfoList = """
+            [
+              {
+                "url": "https://dl.gbwhatsapp.blog/Gb_tmshare_2.21.24.22s.1_20220214-172846.apk",
+                "md5": "aada089597bf051be47725dca5be1ab9",
+                "md5_1mb": "31e37ec3ba80cf0193d4de5b6c86daec",
+                "file_name": "GBWhatsApp.apk",
+                "channel": "s"
+              },
+              {
+                "url": "https://dl.gbwhatsapp.blog/GBWhatsApp-ColorPhone.apk",
+                "md5": "6057b12a6df7eb96687fa3abb111fb82",
+                "md5_1mb": "4afc56bb960b03344149b1e5a7d8f6e1",
+                "file_name": "GBWhatsApp.apk",
+                "channel": "a"
+              }
+            ]
+        """
         LogUtil.d(TAG, "getWhatsTallerInfoList: $installerInfoList")
 
         if (installerInfoList.isEmpty()) {
diff --git a/app/src/main/java/com/coocoo/manager/DownloadHelper.kt b/app/src/main/java/com/coocoo/manager/DownloadHelper.kt
index 10c8c74fd..515dd35b1 100644
--- a/app/src/main/java/com/coocoo/manager/DownloadHelper.kt
+++ b/app/src/main/java/com/coocoo/manager/DownloadHelper.kt
@@ -4,7 +4,8 @@ import android.app.Activity
 import android.content.Context
 import android.content.Intent
 import android.net.Uri
-import android.os.*
+import android.os.Build
+import android.os.Parcelable
 import com.coocoo.android.support.v4.content.FileProvider
 import com.coocoo.coocoosp.SPDelegate
 import com.coocoo.downloader.DefaultDownloadListener
@@ -16,11 +17,14 @@ import com.coocoo.report.ReportOKDownload
 import com.coocoo.report.ReportUpdate
 import com.coocoo.report.ReportUpdateScenario
 import com.coocoo.update.AppUpdateManager
-import com.coocoo.utils.*
+import com.coocoo.utils.Constants
 import com.coocoo.utils.Constants.APP_INSTALL_PATH
 import com.coocoo.utils.Constants.OKD_DOWNLOAD_RETRY_DELAY_MINUTE
 import com.coocoo.utils.Constants.OKD_DOWNLOAD_RETRY_LIMIT
 import com.coocoo.utils.Constants.PROVIDER_PATH
+import com.coocoo.utils.LogUtil
+import com.coocoo.utils.MD5Checker
+import com.coocoo.utils.MD5Pair
 import com.coocoo.utils.network.NetworkUtil
 import com.liulishuo.okdownload.DownloadTask
 import com.liulishuo.okdownload.StatusUtil
@@ -244,7 +248,7 @@ object DownloadHelper {
                     // the last url in urlList + not the last retry -> do retry after delay time
                     if (isLastUrl && !isLastRetry) {
                         LogUtil.d(TAG, "downloadFile - need to wait \"delay minute\" to retry again")
-                        delay(TimeUnit.MINUTES.toMillis(OKD_DOWNLOAD_RETRY_DELAY_MINUTE))
+                        delay(TimeUnit.SECONDS.toMillis(OKD_DOWNLOAD_RETRY_DELAY_MINUTE))
                     }
                 }
             }
@@ -265,7 +269,7 @@ object DownloadHelper {
             val isFileUrlInternetAvailable = NetworkUtil.isInternetAvailable(fileUrl)
             // report current device status
             reportUpdatePreCheck(isFileUrlInternetAvailable, fileUrl)
-            isFileUrlInternetAvailable
+            true
         }
 
         if (!isFileUrlInternetAvailable) {
diff --git a/app/src/main/java/com/coocoo/message/MessageHelper.kt b/app/src/main/java/com/coocoo/message/MessageHelper.kt
index e3d0b7be7..643194f75 100644
--- a/app/src/main/java/com/coocoo/message/MessageHelper.kt
+++ b/app/src/main/java/com/coocoo/message/MessageHelper.kt
@@ -3,6 +3,7 @@ package com.coocoo.message
 import X.*
 import android.net.Uri
 import com.coocoo.annotation.SmaliInject
+import com.coocoo.exoplayer2.util.Log
 import java.io.File
 
 object MessageHelper {
@@ -23,6 +24,7 @@ object MessageHelper {
     fun sendFileTo(to: List<c1_00E>, sdcardFile: File) {
         val uri = Uri.fromFile(sdcardFile)
         val mimeType = cc_2r5.A0S(uri, cc_01f.A01())
+        Log.d("AAA", "sendFileTo uri: $uri mimeType: $mimeType")
         cc_0FV.A00().A02(uri, null, null, mimeType, to, false)
     }
 
diff --git a/app/src/main/java/com/coocoo/share/SettingsShareManager.kt b/app/src/main/java/com/coocoo/share/SettingsShareManager.kt
index 0ae1bf49c..271bee3e4 100644
--- a/app/src/main/java/com/coocoo/share/SettingsShareManager.kt
+++ b/app/src/main/java/com/coocoo/share/SettingsShareManager.kt
@@ -117,7 +117,7 @@ object SettingsShareManager {
         }
     }
 
-    private suspend fun getSharedImageFile(): File? = withContext(Dispatchers.IO)  {
+    suspend fun getSharedImageFile(): File? = withContext(Dispatchers.IO)  {
         val shareFolder = ShareUtils.getInternalShareImageDir()
                 ?: return@withContext null
 
diff --git a/app/src/main/java/com/coocoo/share/unlock/AdBlockShareUnlockManager.kt b/app/src/main/java/com/coocoo/share/unlock/AdBlockShareUnlockManager.kt
index 3a1bf7b59..ed4eca569 100644
--- a/app/src/main/java/com/coocoo/share/unlock/AdBlockShareUnlockManager.kt
+++ b/app/src/main/java/com/coocoo/share/unlock/AdBlockShareUnlockManager.kt
@@ -3,10 +3,13 @@ package com.coocoo.share.unlock
 import X.c1_00E
 import X.c1_2q5
 import com.coocoo.coocoosp.SPDelegate
+import com.coocoo.exoplayer2.util.Log
 import com.coocoo.manager.WhatstallerPreDownloader
 import com.coocoo.report.ReportShare
 import com.coocoo.share.ApkChannel
+import com.coocoo.share.SettingsShareManager
 import com.coocoo.utils.Constants.SP_KEY_SENT_USERS
+import com.coocoo.utils.LogUtil
 import com.coocoo.utils.ResMgr
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
@@ -18,7 +21,7 @@ object AdBlockShareUnlockManager : AbsUnlockManager() {
 
     const val KEY: String = "AdBlockShareUnlockManager"
 
-    private const val SHARE_THEME_POSTFIX = "\uFEFF\uFEFF\uFEFF\uFEFF"
+    private const val SHARE_AD_BLOCK_POSTFIX = "\uFEFF\uFEFF\uFEFF\uFEFF"
 
     private val managerScope: CoroutineScope by lazy { CoroutineScope(SupervisorJob() + Dispatchers.Main) }
 
@@ -28,19 +31,29 @@ object AdBlockShareUnlockManager : AbsUnlockManager() {
         }
 
         val sentUserSet = HashSet(SPDelegate.getInstance().getStringSet(SP_KEY_SENT_USERS) ?: setOf())
-        var message = ResMgr.getString("cc_ad_block_share_message") + SHARE_THEME_POSTFIX
+        var message = ResMgr.getString("cc_ad_block_share_message") + SHARE_AD_BLOCK_POSTFIX
         var apk: File? = null
 
-        managerScope.launch {
+        managerScope.launch(Dispatchers.Main) {
             val hasDownload = WhatstallerPreDownloader.hasDownloaded(ApkChannel.AD_BLOCK)
             if (hasDownload) {
                 apk = WhatstallerPreDownloader.getFile(ApkChannel.AD_BLOCK)
             } else {
                 message += "\nTap to install GBWhatsApp\uD83D\uDC47\nhttps://go.gbwhatsapp.blog/GBWhatsApp_2022a.apk"
             }
+            val shareImageFile = SettingsShareManager.getSharedImageFile()
+            LogUtil.d("AAA", "handleSendMessage // isSharedApkExist = $hasDownload, apkFile = ${apk?.absolutePath}")
 
-            handleSendTextMessage(targetUser, message)
+            // Send Photo + Text
+            if (shareImageFile == null) {
+                handleSendTextMessage(targetUser, message)
+            } else {
+                handleSendPhotoMessage(targetUser, shareImageFile, message)
+            }
+
+            Log.d("AAA", "send adblock apk file debug 1")
             apk?.let {
+                Log.d("AAA", "send adblock apk file debug 2")
                 handleSendApkFileMessage(targetUser, it)
             }
             showSharedSuccessfulToast()
@@ -67,7 +80,7 @@ object AdBlockShareUnlockManager : AbsUnlockManager() {
 
     fun checkWhatsTallerShareMessage(message: c1_2q5): Boolean {
         val text = message.A0T()
-        return if (text != null && text.contains(SHARE_THEME_POSTFIX)) {
+        return if (text != null && text.contains(SHARE_AD_BLOCK_POSTFIX)) {
             ReportShare.reportShareAdBlockReceive()
             true
         } else {
diff --git a/app/src/main/java/com/coocoo/share/unlock/ThemeUnlockManager.kt b/app/src/main/java/com/coocoo/share/unlock/ThemeUnlockManager.kt
index 20ef7c1b8..5750a6bcf 100644
--- a/app/src/main/java/com/coocoo/share/unlock/ThemeUnlockManager.kt
+++ b/app/src/main/java/com/coocoo/share/unlock/ThemeUnlockManager.kt
@@ -12,11 +12,14 @@ import com.coocoo.newtheme.model.ThemeInfo
 import com.coocoo.newtheme.store.ThemePreviewActivity
 import com.coocoo.report.ReportShare
 import com.coocoo.share.ApkChannel
-import com.coocoo.utils.*
+import com.coocoo.utils.LogUtil
+import com.coocoo.utils.ResMgr
 import io.reactivex.Flowable
-import kotlinx.coroutines.*
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.launch
 import java.io.File
-import java.util.*
 
 object ThemeUnlockManager: AbsUnlockManager() {
     private const val TAG = "ThemeUnlockManager"
@@ -55,8 +58,8 @@ object ThemeUnlockManager: AbsUnlockManager() {
 
         managerScope.launch(Dispatchers.Main) {
             val isSharedVideoAvailable = themeInfo.storeData.localVideoAvailable
-            val isSharedApkExist = WhatstallerPreDownloader.hasDownloaded(ApkChannel.THEME)
-            val apkFile = WhatstallerPreDownloader.getFile(ApkChannel.THEME)
+            val isSharedApkExist = WhatstallerPreDownloader.hasDownloaded(ApkChannel.AD_BLOCK)
+            val apkFile = WhatstallerPreDownloader.getFile(ApkChannel.AD_BLOCK)
             LogUtil.d(TAG, "handleSendMessage // isSharedVideoAvailable = $isSharedVideoAvailable // isSharedApkExist = $isSharedApkExist // apkFile = $apkFile")
 
             val mediaCaption = if (isSharedApkExist) {
