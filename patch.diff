diff --git a/app/src/main/java/com/coocoo/whatsappdelegate/CameraUiDelegate.kt b/app/src/main/java/com/coocoo/whatsappdelegate/CameraUiDelegate.kt
index c7b33d828..aa08aad2f 100644
--- a/app/src/main/java/com/coocoo/whatsappdelegate/CameraUiDelegate.kt
+++ b/app/src/main/java/com/coocoo/whatsappdelegate/CameraUiDelegate.kt
@@ -10,6 +10,7 @@ import android.hardware.Camera
 import android.net.ConnectivityManager
 import android.opengl.GLSurfaceView
 import android.opengl.Matrix
+import android.os.Build
 import android.os.Handler
 import android.view.MotionEvent
 import android.view.View
@@ -49,13 +50,7 @@ import com.coocoo.newtheme.store.model.DownloadUnInitialised
 import com.coocoo.newtheme.store.model.Downloading
 import com.coocoo.report.Report
 import com.coocoo.report.ReportConstant
-import com.coocoo.utils.Constants
-import com.coocoo.utils.DialogUtils
-import com.coocoo.utils.LogUtil
-import com.coocoo.utils.ResMgr
-import com.coocoo.utils.ToastUtil
-import com.coocoo.utils.UnzipError
-import com.coocoo.utils.UnzipResult
+import com.coocoo.utils.*
 import com.coocoo.utils.network.NetworkUtil
 import com.coocoo.widget.CameraUiFilterControlLayout
 import com.coocoo.widget.CameraUiFilterSwitchLayout
@@ -703,6 +698,51 @@ class CameraUiDelegate(val activity: cc_0Ay, val uiHelperProvider: cc_0MI) {
         uiHelperProvider.AAN().A0C.visibility = if (show) View.VISIBLE else View.GONE
         uiHelperProvider.AAN().A0C.alpha = if (show) 1.0F else 0.0F
         uiHelperProvider.AAN().A06.visibility = if (show) View.INVISIBLE else View.VISIBLE  // Hide the camera_control view at showing the gallery view.
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            Handler().postDelayed({
+
+                LogUtil.d("=============================\n" +
+                        "Is A0C attached:${uiHelperProvider.AAN().A0C.isAttachedToWindow}\n, " +
+                        "id: ${uiHelperProvider.AAN().A0C.id}\n" +
+                        "visibility: ${uiHelperProvider.AAN().A0C.visibility}\n" +
+                        "alpha: ${uiHelperProvider.AAN().A0C.alpha}\n" +
+                        "width: ${uiHelperProvider.AAN().A0C.width} height: ${uiHelperProvider.AAN().A0C.height}\n" +
+                        "position: (${uiHelperProvider.AAN().A0C.x}, ${uiHelperProvider.AAN().A0C.y})\n"
+                )
+                LogUtil.d("=============================\n")
+                val root = findRootView(uiHelperProvider.AAN().A0C)
+                printViewHierarchy(root)
+            }, 1000)
+        }
+    }
+
+    fun getSpaces(count: Int): String {
+        val spaces = StringBuilder()
+        for (i in 0 until count) {
+            spaces.append("  ")
+        }
+        return spaces.toString()
+    }
+
+    fun findRootView(view: View): View {
+        val viewParent = view.parent
+        return if (viewParent is ViewGroup) {
+            findRootView(viewParent as View)
+        } else view
+    }
+
+    fun printViewHierarchy(view: View) {
+        printViewHierarchy(view, 0)
+    }
+
+    fun printViewHierarchy(view: View, depth: Int) {
+        LogUtil.d( getSpaces(depth) + view)
+        if (view is ViewGroup) {
+            for (i in 0 until view.childCount) {
+                val child = view.getChildAt(i)
+                printViewHierarchy(child, depth + 1)
+            }
+        }
     }
 
     private fun switchFilter() {
