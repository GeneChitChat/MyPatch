diff --git a/app/src/main/java/com/coocoo/statuses/myhistory/MyStatusHistoryListRepository.kt b/app/src/main/java/com/coocoo/statuses/myhistory/MyStatusHistoryListRepository.kt
index 27c23b2d6..30329698c 100644
--- a/app/src/main/java/com/coocoo/statuses/myhistory/MyStatusHistoryListRepository.kt
+++ b/app/src/main/java/com/coocoo/statuses/myhistory/MyStatusHistoryListRepository.kt
@@ -2,12 +2,14 @@ package com.coocoo.statuses.myhistory
 
 import X.c1_2Ql
 import X.cc_2Qk
+import android.database.Cursor
 import android.os.Environment
 import android.util.Log
 import androidx.annotation.WorkerThread
 import com.coocoo.annotation.SmaliInject
 import com.coocoo.db.room.mystatus.MyStatusDatabase
 import com.coocoo.db.room.mystatus.entity.MyStatusHistoryEntity
+import com.coocoo.fm.yo
 import com.coocoo.utils.Constant
 import com.coocoo.utils.FileUtil
 import java.io.File
@@ -74,7 +76,8 @@ class MyStatusHistoryListRepository(private val database: MyStatusDatabase) {
                 // save to database
                 val myStatusHistory = MyStatusHistoryEntity(
                     messageRowId = messageRowId, filePath = copiedFilePath,
-                    timestamp = timestamp, messageType = messageType
+                    timestamp = timestamp, messageType = messageType,
+                    viewCount = queryReceiptUsers(c12Ql)
                 )
                 database.getMyStatusDao().insertMyStatusHistory(myStatusHistory)
                 Log.d(
@@ -86,4 +89,21 @@ class MyStatusHistoryListRepository(private val database: MyStatusDatabase) {
             }
         }
     }
+
+    private fun queryReceiptUsers(c12Ql: c1_2Ql): Int {
+        var count = 0
+        val msgRowIds = arrayOf(c12Ql.A0y.toString())
+        val query = "SELECT read_timestamp FROM receipt_user WHERE message_row_id=?"
+        val db = yo.sql.readableDatabase
+        val cursor = db.rawQuery(query, msgRowIds)
+        val indexReadTimestamp = cursor.getColumnIndexOrThrow("read_timestamp")
+        while (cursor.moveToNext()) {
+            val timestamp = cursor.getLong(indexReadTimestamp)
+            if (timestamp > 0L) {
+                count++
+            }
+        }
+        cursor.close()
+        return count
+    }
 }
\ No newline at end of file
